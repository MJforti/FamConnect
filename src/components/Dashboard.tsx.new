import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useAuth } from '@/contexts/AuthContext';
import { Family, FamilyMember, MediaItem, FamilyRelationship } from '@/types';
import { Users, Search, User, Calendar, Bell, Image as ImageIcon, Video, Edit, Trash2, Link as LinkIcon } from 'lucide-react';
import FamilySelector from './FamilySelector';
import FamilyMemberCard from './FamilyMemberCard';
import AddMemberModal from './AddMemberModal';
import MediaGallery from './MediaGallery';
import FamilyTree from './FamilyTree';
import FamilyRelationships from './FamilyRelationships';

const Dashboard: React.FC = () => {
  const { user, logout } = useAuth();
  const [families, setFamilies] = useState<Family[]>([]);
  const [selectedFamily, setSelectedFamily] = useState<Family | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [filteredMembers, setFilteredMembers] = useState<FamilyMember[]>([]);
  const [mediaItems, setMediaItems] = useState<MediaItem[]>([]);

  useEffect(() => {
    // Load families from localStorage
    const savedFamilies = localStorage.getItem('family-directory-families');
    if (savedFamilies) {
      const parsedFamilies = JSON.parse(savedFamilies);
      setFamilies(parsedFamilies);
      if (parsedFamilies.length > 0) {
        setSelectedFamily(parsedFamilies[0]);
      }
    }

    // Load media items from localStorage
    const savedMedia = localStorage.getItem('family-directory-media');
    if (savedMedia) {
      setMediaItems(JSON.parse(savedMedia));
    }
  }, []);

  // ... rest of the component code ...

  const handleCreateFamily = (familyData: Omit<Family, 'id' | 'createdAt' | 'updatedAt' | 'members' | 'relatedFamilies' | 'isPublic'>) => {
    const newFamily: Family = {
      ...familyData,
      id: `family-${Date.now()}`,
      members: [],
      relatedFamilies: [],
      isPublic: false,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    const updatedFamilies = [...families, newFamily];
    setFamilies(updatedFamilies);
    setSelectedFamily(newFamily);
    localStorage.setItem('family-directory-families', JSON.stringify(updatedFamilies));
    return newFamily;
  };

  const handleUpdateFamily = (updatedFamily: Family) => {
    const updatedFamilies = families.map(f => 
      f.id === updatedFamily.id ? { ...updatedFamily, updatedAt: new Date() } : f
    );
    setFamilies(updatedFamilies);
    if (selectedFamily?.id === updatedFamily.id) {
      setSelectedFamily(updatedFamily);
    }
    localStorage.setItem('family-directory-families', JSON.stringify(updatedFamilies));
    return updatedFamily;
  };

  const handleDeleteFamily = (familyId: string) => {
    // First, remove this family from all related families
    const updatedFamilies = families.map(family => ({
      ...family,
      relatedFamilies: family.relatedFamilies?.filter(rel => rel.familyId !== familyId) || []
    })).filter(f => f.id !== familyId);
    
    setFamilies(updatedFamilies);
    if (selectedFamily?.id === familyId) {
      setSelectedFamily(updatedFamilies[0] || null);
    }
    localStorage.setItem('family-directory-families', JSON.stringify(updatedFamilies));

    // Remove media items for this family
    const updatedMedia = mediaItems.filter(item => item.familyId !== familyId);
    setMediaItems(updatedMedia);
    localStorage.setItem('family-directory-media', JSON.stringify(updatedMedia));
  };

  // ... rest of the component code ...

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b border-border bg-card/50 backdrop-blur-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="family-gradient p-2 rounded-lg">
                <Users className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-foreground">Family Tree</h1>
                <p className="text-sm text-muted-foreground">
                  {selectedFamily ? `Managing ${selectedFamily.name}` : 'Welcome back, ' + user?.fullName}
                </p>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <Badge variant={user?.familyRole === 'admin' ? 'default' : 'secondary'}>
                {user?.familyRole === 'admin' ? 'Admin' : 'Member'}
              </Badge>
              <Button variant="outline" onClick={logout}>
                Sign Out
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        {!selectedFamily ? (
          <FamilySelector
            families={families}
            selectedFamily={selectedFamily}
            onSelectFamily={setSelectedFamily}
            onCreateFamily={handleCreateFamily}
            onUpdateFamily={handleUpdateFamily}
            onDeleteFamily={handleDeleteFamily}
            canEdit={user?.familyRole === 'admin'}
          />
        ) : (
          <Tabs defaultValue="members" className="space-y-6">
            <div className="flex flex-col sm:flex-row gap-4 items-center justify-between">
              <TabsList className="grid w-full max-w-2xl grid-cols-4">
                <TabsTrigger value="families">Families</TabsTrigger>
                <TabsTrigger value="members">Members</TabsTrigger>
                <TabsTrigger value="family-tree">Family Tree</TabsTrigger>
                <TabsTrigger value="media">Media</TabsTrigger>
              </TabsList>
            </div>

            <TabsContent value="families">
              <div className="space-y-6">
                <FamilySelector
                  families={families}
                  selectedFamily={selectedFamily}
                  onSelectFamily={setSelectedFamily}
                  onCreateFamily={handleCreateFamily}
                  onUpdateFamily={handleUpdateFamily}
                  onDeleteFamily={handleDeleteFamily}
                  canEdit={user?.familyRole === 'admin'}
                />
                
                {selectedFamily && (
                  <div className="mt-6">
                    <h3 className="text-lg font-semibold mb-4">Manage Family</h3>
                    <div className="grid gap-4 md:grid-cols-2">
                      <Card>
                        <CardHeader>
                          <CardTitle>Family Details</CardTitle>
                          <CardDescription>View and edit family information</CardDescription>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-2">
                            <div>
                              <Label>Family Name</Label>
                              <p className="font-medium">{selectedFamily.name}</p>
                            </div>
                            {selectedFamily.description && (
                              <div>
                                <Label>Description</Label>
                                <p className="text-muted-foreground">{selectedFamily.description}</p>
                              </div>
                            )}
                            <div>
                              <Label>Created</Label>
                              <p className="text-muted-foreground">
                                {new Date(selectedFamily.createdAt).toLocaleDateString()}
                              </p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                      
                      <Card>
                        <CardHeader>
                          <CardTitle>Quick Actions</CardTitle>
                          <CardDescription>Manage this family</CardDescription>
                        </CardHeader>
                        <CardContent className="space-y-2">
                          <Button variant="outline" className="w-full justify-start">
                            <Edit className="w-4 h-4 mr-2" />
                            Edit Family Details
                          </Button>
                          <Button variant="outline" className="w-full justify-start">
                            <Users className="w-4 h-4 mr-2" />
                            Manage Members
                          </Button>
                          <Button variant="outline" className="w-full justify-start">
                            <LinkIcon className="w-4 h-4 mr-2" />
                            Link to Another Family
                          </Button>
                          <Button 
                            variant="destructive" 
                            className="w-full justify-start"
                            onClick={() => handleDeleteFamily(selectedFamily.id)}
                          >
                            <Trash2 className="w-4 h-4 mr-2" />
                            Delete Family
                          </Button>
                        </CardContent>
                      </Card>
                    </div>
                  </div>
                )}
              </div>
            </TabsContent>

            <TabsContent value="members" className="space-y-6">
              {/* Members tab content */}
            </TabsContent>

            <TabsContent value="family-tree">
              <FamilyTree 
                members={selectedFamily.members} 
                onUpdateMember={handleUpdateMember} 
                onDeleteMember={handleDeleteMember}
                canEdit={user?.familyRole === 'admin'}
              />
            </TabsContent>

            <TabsContent value="media">
              <MediaGallery 
                mediaItems={mediaItems.filter(item => item.familyId === selectedFamily.id)}
                onUploadMedia={handleUploadMedia}
                onDeleteMedia={handleDeleteMedia}
                canEdit={user?.familyRole === 'admin'}
              />
            </TabsContent>
          </Tabs>
        )}
      </div>
    </div>
  );
};

export default Dashboard;
