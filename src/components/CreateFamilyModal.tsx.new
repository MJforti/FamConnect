import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Family } from '@/types';
import { Image as ImageIcon, Globe, Lock } from 'lucide-react';

interface CreateFamilyModalProps {
  isOpen: boolean;
  onClose: () => void;
  onCreate: (family: Omit<Family, 'id' | 'createdAt' | 'updatedAt' | 'members' | 'relatedFamilies'>) => void;
}
interface FamilyFormData {
  name: string;
  description: string;
  coverImage: string;
  isPublic: boolean;
}

const CreateFamilyModal: React.FC<CreateFamilyModalProps> = ({
  isOpen,
  onClose,
  onCreate
}) => {
  const [formData, setFormData] = useState<FamilyFormData>({
    name: '',
    description: '',
    coverImage: '',
    isPublic: false
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.name.trim()) return;

    onCreate({
      name: formData.name.trim(),
      description: formData.description.trim() || undefined,
      coverImage: formData.coverImage.trim() || undefined,
      isPublic: formData.isPublic,
      createdBy: ''
    });

    setFormData({ 
      name: '', 
      description: '',
      coverImage: '',
      isPublic: false 
    });
    onClose();
  };

  const handleClose = () => {
    setFormData({ 
      name: '', 
      description: '',
      coverImage: '',
      isPublic: false 
    });
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>Create New Family</DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4 mt-4">
          <div className="space-y-2">
            <Label htmlFor="name">Family Name *</Label>
            <Input
              id="name"
              placeholder="Enter family name"
              value={formData.name}
              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
              required
              className="bg-background"
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              placeholder="Tell us about this family (optional)"
              rows={3}
              value={formData.description}
              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
              className="bg-background min-h-[100px]"
            />
          </div>

          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <Label htmlFor="coverImage">Cover Image URL</Label>
              <span className="text-xs text-muted-foreground">Optional</span>
            </div>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <ImageIcon className="h-4 w-4 text-muted-foreground" />
              </div>
              <Input
                id="coverImage"
                type="url"
                placeholder="https://example.com/cover.jpg"
                value={formData.coverImage}
                onChange={(e) => setFormData(prev => ({ ...prev, coverImage: e.target.value }))}
                className="pl-10 bg-background"
              />
            </div>
          </div>

          <div className="flex items-center justify-between rounded-lg border p-4">
            <div className="space-y-0.5">
              <Label htmlFor="isPublic" className="flex items-center gap-2">
                {formData.isPublic ? (
                  <Globe className="h-4 w-4 text-blue-500" />
                ) : (
                  <Lock className="h-4 w-4 text-muted-foreground" />
                )}
                <span>Make this family public</span>
              </Label>
              <p className="text-sm text-muted-foreground">
                {formData.isPublic 
                  ? 'Anyone with the link can view this family' 
                  : 'Only invited members can view this family'}
              </p>
            </div>
            <Switch
              id="isPublic"
              checked={formData.isPublic}
              onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isPublic: checked }))}
            />
          </div>

          <DialogFooter className="pt-4">
            <Button type="button" variant="outline" onClick={handleClose}>
              Cancel
            </Button>
            <Button 
              type="submit" 
              className="family-gradient hover:opacity-90"
              disabled={!formData.name.trim()}
            >
              Create Family
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default CreateFamilyModal;
