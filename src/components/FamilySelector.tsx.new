import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Family } from '@/types';
import { Users, Plus, Edit, Trash2, ChevronDown, ChevronUp, Link as LinkIcon } from 'lucide-react';
import CreateFamilyModal from './CreateFamilyModal';
import FamilyRelationshipManager from './FamilyRelationshipManager';
import { cn } from '@/lib/utils';

interface FamilySelectorProps {
  families: Family[];
  selectedFamily: Family | null;
  onSelectFamily: (family: Family) => void;
  onCreateFamily: (family: Omit<Family, 'id' | 'createdAt' | 'updatedAt' | 'members' | 'relatedFamilies' | 'isPublic'>) => Family;
  onUpdateFamily: (family: Family) => void;
  onDeleteFamily: (familyId: string) => void;
  canEdit: boolean;
}

const FamilySelector: React.FC<FamilySelectorProps> = ({
  families,
  selectedFamily,
  onSelectFamily,
  onCreateFamily,
  onUpdateFamily,
  onDeleteFamily,
  canEdit
}) => {
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedFamilyId, setExpandedFamilyId] = useState<string | null>(null);
  const [showRelationships, setShowRelationships] = useState<Record<string, boolean>>({});

  const filteredFamilies = families.filter(family =>
    family.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    family.description?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const toggleExpandFamily = (familyId: string) => {
    setExpandedFamilyId(expandedFamilyId === familyId ? null : familyId);
  };

  const toggleShowRelationships = (familyId: string) => {
    setShowRelationships(prev => ({
      ...prev,
      [familyId]: !prev[familyId]
    }));
  };

  const handleDeleteFamily = (family: Family) => {
    if (window.confirm(`Are you sure you want to delete the "${family.name}" family? This will remove all members and cannot be undone.`)) {
      onDeleteFamily(family.id);
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row gap-4 items-center justify-between">
        <Input
          placeholder="Search families..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="max-w-md"
        />
        {canEdit && (
          <Button
            onClick={() => setIsCreateModalOpen(true)}
            className="family-gradient hover:opacity-90"
          >
            <Plus className="w-4 h-4 mr-2" />
            Create Family
          </Button>
        )}
      </div>

      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredFamilies.map((family) => (
          <div key={family.id} className="space-y-2">
            <Card
              className={cn(
                'cursor-pointer transition-all duration-200 hover:shadow-lg',
                selectedFamily?.id === family.id
                  ? 'ring-2 ring-primary bg-primary/5'
                  : 'hover:bg-muted/50',
                expandedFamilyId === family.id && 'rounded-b-none border-b-0'
              )}
              onClick={() => onSelectFamily(family)}
            >
              <CardHeader className="pb-3">
                <div className="flex items-start justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 family-gradient rounded-lg flex items-center justify-center">
                      <Users className="w-5 h-5 text-white" />
                    </div>
                    <div>
                      <CardTitle className="text-lg">{family.name}</CardTitle>
                      <div className="flex items-center gap-2 mt-1">
                        <Badge variant="secondary" className="text-xs">
                          {family.members?.length || 0} members
                        </Badge>
                        {(family.relatedFamilies?.length || 0) > 0 && (
                          <Badge variant="outline" className="text-xs">
                            {family.relatedFamilies?.length} linked
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-1">
                    {canEdit && (
                      <>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            // TODO: Implement edit
                          }}
                          className="h-8 w-8 p-0"
                        >
                          <Edit className="w-4 h-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDeleteFamily(family);
                          }}
                          className="h-8 w-8 p-0 text-destructive hover:text-destructive"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </>
                    )}
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        toggleExpandFamily(family.id);
                      }}
                      className="h-8 w-8 p-0"
                    >
                      {expandedFamilyId === family.id ? (
                        <ChevronUp className="w-4 h-4" />
                      ) : (
                        <ChevronDown className="w-4 h-4" />
                      )}
                    </Button>
                  </div>
                </div>
              </CardHeader>

              <CardContent className="pt-0">
                {family.description && (
                  <p className="text-sm text-muted-foreground line-clamp-2 mb-2">
                    {family.description}
                  </p>
                )}
                
                {(family.relatedFamilies?.length || 0) > 0 && (
                  <div className="mt-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      className="text-xs h-7 px-2 text-muted-foreground"
                      onClick={(e) => {
                        e.stopPropagation();
                        toggleShowRelationships(family.id);
                      }}
                    >
                      {showRelationships[family.id] ? 'Hide' : 'Show'} relationships
                      {showRelationships[family.id] ? (
                        <ChevronUp className="w-3 h-3 ml-1" />
                      ) : (
                        <ChevronDown className="w-3 h-3 ml-1" />
                      )}
                    </Button>
                    
                    {showRelationships[family.id] && (
                      <div className="mt-2 space-y-1">
                        {family.relatedFamilies?.map((rel, idx) => {
                          const relatedFamily = families.find(f => f.id === rel.familyId);
                          if (!relatedFamily) return null;
                          return (
                            <div key={idx} className="flex items-center justify-between text-xs p-2 bg-muted/30 rounded">
                              <span className="font-medium">{relatedFamily.name}</span>
                              <span className="text-muted-foreground capitalize">{rel.relationshipType}</span>
                            </div>
                          );
                        })}
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>

            {expandedFamilyId === family.id && (
              <Card className="rounded-t-none border-t-0">
                <CardHeader className="py-3">
                  <CardTitle className="text-base flex items-center gap-2">
                    <LinkIcon className="w-4 h-4" />
                    Family Relationships
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <FamilyRelationshipManager
                    currentFamily={family}
                    allFamilies={families}
                    onUpdateFamily={onUpdateFamily}
                  />
                </CardContent>
              </Card>
            )}
          </div>
        ))}
      </div>

      {filteredFamilies.length === 0 && (
        <Card className="border-0 shadow-lg bg-card/80 backdrop-blur-sm">
          <CardContent className="p-12 text-center">
            <Users className="w-16 h-16 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-foreground mb-2">
              {searchTerm ? 'No families found' : 'No families yet'}
            </h3>
            <p className="text-muted-foreground mb-4">
              {searchTerm 
                ? 'Try adjusting your search terms'
                : 'Start by creating your first family'
              }
            </p>
            {!searchTerm && canEdit && (
              <Button
                onClick={() => setIsCreateModalOpen(true)}
                className="family-gradient hover:opacity-90"
              >
                Create First Family
              </Button>
            )}
          </CardContent>
        </Card>
      )}

      <CreateFamilyModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onCreate={onCreateFamily}
      />
    </div>
  );
};

export default FamilySelector;
